package dao;

import entity.chamCong;
import utils.Xjdbc;
import java.sql.*;
import java.time.LocalDate;
import java.time.LocalTime;
import java.util.ArrayList;
import java.util.List;
import static utils.Xjdbc.getStmt;

public class ChamCongDao {

    // Ph∆∞∆°ng th·ª©c insertCheckIn - Th√™m check-in
    public boolean insertCheckIn(String maNV, LocalDate ngay, String ca, LocalTime checkIn) {
        // Ki·ªÉm tra ƒë√£ check-in ch∆∞a
        if (isCheckedIn(maNV, ngay)) {
            System.out.println("‚ö†Ô∏è ƒê√£ check-in h√¥m nay r·ªìi: " + maNV + " - " + ngay);
            return false;
        }

        // Ch·ªâ insert v√†o ChamCong, kh√¥ng ƒë·ªông ƒë·∫øn b·∫£ng Luong
        String sql = "INSERT INTO ChamCong (MaNV, Ngay, CaLamViec, CheckIn) VALUES (?, ?, ?, ?)";
        try {
            System.out.println("üì• INSERT check-in: " + maNV + " | " + ngay + " | " + ca + " | " + checkIn);
            int result = Xjdbc.update(sql, maNV, Date.valueOf(ngay), ca, Time.valueOf(checkIn));
            return result > 0;
        } catch (Exception e) {
            System.err.println("‚ùå L·ªói khi insertCheckIn: " + e.getMessage());
            throw new RuntimeException(e); // N√©m ngo·∫°i l·ªá ƒë·ªÉ x·ª≠ l√Ω ·ªü t·∫ßng UI
        }
    }

    // Ph∆∞∆°ng th·ª©c updateCheckOut - C·∫≠p nh·∫≠t gi·ªù ra
    public boolean updateCheckOut(String maNV, LocalDate ngay, LocalTime checkOut) {
        // C·∫≠p nh·∫≠t gi·ªù ra v√†o ChamCong tr∆∞·ªõc
        String updateSql = "UPDATE ChamCong SET CheckOut = ? WHERE MaNV = ? AND Ngay = ?";
        int updated = Xjdbc.update(updateSql, Time.valueOf(checkOut), maNV, Date.valueOf(ngay));

        if (updated > 0) {
            // Sau khi update th√†nh c√¥ng, t√≠nh to√°n v√† insert v√†o Luong
            chamCong cc = findByMaNVAndNgay(maNV, ngay);
            if (cc != null && cc.getCheckIn() != null) {
                insertLuongFromChamCong(cc);  // C·∫≠p nh·∫≠t l∆∞∆°ng khi check-out
                return true;
            }
        }
        return false;
    }

    // T√¨m b·∫£n ghi ch·∫•m c√¥ng theo m√£ nh√¢n vi√™n v√† ng√†y
    public chamCong findByMaNVAndNgay(String maNV, LocalDate ngay) {
        String sql = "SELECT cc.MaNV, nv.HoTen AS TenNV, cc.Ngay, cc.CaLamViec, cc.CheckIn, cc.CheckOut "
                + "FROM ChamCong cc JOIN NhanVien nv ON cc.MaNV = nv.MaNV "
                + "WHERE cc.MaNV = ? AND cc.Ngay = ?";
        try (ResultSet rs = Xjdbc.query(sql, maNV, Date.valueOf(ngay))) {
            if (rs.next()) {
                chamCong cc = new chamCong();
                cc.setMaNV(rs.getString("MaNV"));
                cc.setTenNV(rs.getString("TenNV"));
                cc.setNgay(rs.getDate("Ngay").toLocalDate());
                cc.setCa(rs.getString("CaLamViec"));
                Time checkIn = rs.getTime("CheckIn");
                Time checkOut = rs.getTime("CheckOut");
                cc.setCheckIn(checkIn != null ? checkIn.toLocalTime() : null);
                cc.setCheckOut(checkOut != null ? checkOut.toLocalTime() : null);
                return cc;
            }
        } catch (SQLException e) {
            System.err.println("‚ùå L·ªói khi t√¨m b·∫£n ghi ChamCong: " + e.getMessage());
            e.printStackTrace();
        }
        return null;
    }

    // Ph∆∞∆°ng th·ª©c insertLuongFromChamCong - C·∫≠p nh·∫≠t l∆∞∆°ng t·ª´ ch·∫•m c√¥ng
    public void insertLuongFromChamCong(chamCong cc) {
        if (cc.getCheckOut() == null) {
            System.err.println("‚ö†Ô∏è Kh√¥ng th·ªÉ insert l∆∞∆°ng v√¨ thi·∫øu GioRa");
            return;
        }

        final int LUONG_CO_BAN = 35000;
        final int LUONG_TANG_CA = 50000;
        final int PHAT_DI_TRE = 50000;

        double gioLam = java.time.Duration.between(cc.getCheckIn(), cc.getCheckOut()).toMinutes() / 60.0;
        double gioTangCa = 0;
        boolean diTre = false;
        String ghiChu = "";

        LocalTime start = cc.getCa().equals("CA1") ? LocalTime.of(8, 0) : LocalTime.of(16, 0);
        LocalTime end = cc.getCa().equals("CA1") ? LocalTime.of(16, 0) : LocalTime.of(23, 59);

        if (cc.getCheckIn().isAfter(start.plusMinutes(30))) {
            diTre = true;
            ghiChu = "ƒêi tr·ªÖ, ph·∫°t 50k";
        }

        if (cc.getCheckOut().isAfter(end)) {
            gioTangCa = java.time.Duration.between(end, cc.getCheckOut()).toMinutes() / 60.0;
        }

        int tongLuong = (int) (gioLam * LUONG_CO_BAN + gioTangCa * LUONG_TANG_CA - (diTre ? PHAT_DI_TRE : 0));

        String sql = "INSERT INTO Luong (MaNV, NgayLam, GioLam, GioTangCa, DiTre, GhiChu, Luong) "
                + "VALUES (?, ?, ?, ?, ?, ?, ?)";

        try {
            Xjdbc.update(sql,
                    cc.getMaNV(), // "PhucNT"
                    cc.getNgay(), // "2025-04-16"
                    gioLam, // S·ªë gi·ªù l√†m (t√≠nh t·ª´ check-in v√† check-out)
                    gioTangCa, // S·ªë gi·ªù tƒÉng ca (n·∫øu c√≥)
                    diTre, // Tr·ªÖ hay kh√¥ng (0 ho·∫∑c 1)
                    ghiChu, // Ghi ch√∫ (n·∫øu c√≥)
                    tongLuong // T·ªïng l∆∞∆°ng t√≠nh ƒë∆∞·ª£c
            );
            System.out.println("‚úÖ ƒê√£ th√™m b·∫£n ghi l∆∞∆°ng cho " + cc.getMaNV());
        } catch (Exception e) {
            System.err.println("‚ùå L·ªói khi th√™m b·∫£n ghi l∆∞∆°ng: " + e.getMessage());
            e.printStackTrace();
        }
    }

    // Ki·ªÉm tra xem nh√¢n vi√™n ƒë√£ check-in ch∆∞a
    public boolean isCheckedIn(String maNV, LocalDate ngay) {
        String sql = "SELECT COUNT(*) FROM ChamCong WHERE MaNV = ? AND Ngay = ?";
        try (ResultSet rs = Xjdbc.query(sql, maNV, Date.valueOf(ngay))) {
            if (rs.next()) {
                return rs.getInt(1) > 0;
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return false;
    }

    // L·∫•y danh s√°ch ch·∫•m c√¥ng theo m√£ nh√¢n vi√™n v√† th√°ng/nƒÉm
    public List<chamCong> findByNhanVien_Thang_Nam(String maNV, int thang, int nam) {
        List<chamCong> list = new ArrayList<>();
        String sql = "SELECT cc.MaNV, nv.TenNV, cc.Ngay, cc.CaLamViec, cc.CheckIn, cc.CheckOut "
                + "FROM ChamCong cc JOIN NhanVien nv ON cc.MaNV = nv.MaNV "
                + "WHERE cc.MaNV = ? AND MONTH(cc.Ngay) = ? AND YEAR(cc.Ngay) = ? ORDER BY cc.Ngay";

        try (ResultSet rs = Xjdbc.query(sql, maNV, thang, nam)) {
            while (rs.next()) {
                chamCong cc = new chamCong();
                cc.setMaNV(rs.getString("MaNV"));
                cc.setTenNV(rs.getString("TenNV"));
                cc.setNgay(rs.getDate("Ngay").toLocalDate());
                cc.setCa(rs.getString("CaLamViec"));
                Time in = rs.getTime("CheckIn");
                Time out = rs.getTime("CheckOut");
                cc.setCheckIn(in != null ? in.toLocalTime() : null);
                cc.setCheckOut(out != null ? out.toLocalTime() : null);
                list.add(cc);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return list;
    }

    // L·∫•y t·∫•t c·∫£ ch·∫•m c√¥ng c·ªßa nh√¢n vi√™n
    public List<chamCong> findAllByNhanVien(String maNV) {
        List<chamCong> list = new ArrayList<>();
        String sql = "SELECT cc.MaNV, nv.TenNV, cc.Ngay, cc.CaLamViec, cc.CheckIn, cc.CheckOut "
                + "FROM ChamCong cc JOIN NhanVien nv ON cc.MaNV = nv.MaNV WHERE cc.MaNV = ? ORDER BY cc.Ngay DESC";

        try (ResultSet rs = Xjdbc.query(sql, maNV)) {
            while (rs.next()) {
                chamCong cc = new chamCong();
                cc.setMaNV(rs.getString("MaNV"));
                cc.setTenNV(rs.getString("TenNV"));
                cc.setNgay(rs.getDate("Ngay").toLocalDate());
                cc.setCa(rs.getString("CaLamViec"));
                Time in = rs.getTime("CheckIn");
                Time out = rs.getTime("CheckOut");
                cc.setCheckIn(in != null ? in.toLocalTime() : null);
                cc.setCheckOut(out != null ? out.toLocalTime() : null);
                list.add(cc);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return list;
    }

    // C·∫≠p nh·∫≠t SQL th·ªß c√¥ng n·∫øu c·∫ßn
    public static int update(String sql, Object... args) {
        try {
            PreparedStatement stmt = getStmt(sql, args);
            try {
                return stmt.executeUpdate();
            } finally {
                stmt.getConnection().close();
            }
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }
}
